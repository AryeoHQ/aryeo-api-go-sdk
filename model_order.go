/*
 * Aryeo
 *
 *
 * API version: 2021-06-17
 * Contact: jarrod@aryeo.com
 */

package aryeo

import (
	"encoding/json"
)

// Order A payment request for some content or service.
type Order struct {
	// ID of the order.
	Id string `json:"id"`
	// A vanity id used for internal tracking of orders for a given vendor. 
	Number int32 `json:"number"`
	// The title of the order, generated by combining the order's number property with the prefix \"Order #\". 
	Title string `json:"title"`
	// The fulfillment status of the order.
	FulfillmentStatus string `json:"fulfillment_status"`
	// The payment status of the order.
	PaymentStatus string `json:"payment_status"`
	// The three-letter ISO 4217 currency code for the currency in which this order was or will be transacted. Must be a supported currency of Aryeo. 
	Currency *string `json:"currency,omitempty"`
	// A positive integer in cents representing the total order amount that was or will be charged.
	TotalAmount *int32 `json:"total_amount,omitempty"`
	// A URL of a publicly-accessible webpage to pay for the order.
	PaymentUrl NullableString `json:"payment_url,omitempty"`
	// A URL of a publicly-accessible webpage to see the order's status.
	StatusUrl NullableString `json:"status_url,omitempty"`
}

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder(id string, number int32, title string, fulfillmentStatus string, paymentStatus string) *Order {
	this := Order{}
	this.Id = id
	this.Number = number
	this.Title = title
	this.FulfillmentStatus = fulfillmentStatus
	this.PaymentStatus = paymentStatus
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	return &this
}

// GetId returns the Id field value
func (o *Order) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Order) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Order) SetId(v string) {
	o.Id = v
}

// GetNumber returns the Number field value
func (o *Order) GetNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *Order) GetNumberOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *Order) SetNumber(v int32) {
	o.Number = v
}

// GetTitle returns the Title field value
func (o *Order) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Order) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Order) SetTitle(v string) {
	o.Title = v
}

// GetFulfillmentStatus returns the FulfillmentStatus field value
func (o *Order) GetFulfillmentStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FulfillmentStatus
}

// GetFulfillmentStatusOk returns a tuple with the FulfillmentStatus field value
// and a boolean to check if the value has been set.
func (o *Order) GetFulfillmentStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FulfillmentStatus, true
}

// SetFulfillmentStatus sets field value
func (o *Order) SetFulfillmentStatus(v string) {
	o.FulfillmentStatus = v
}

// GetPaymentStatus returns the PaymentStatus field value
func (o *Order) GetPaymentStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentStatus
}

// GetPaymentStatusOk returns a tuple with the PaymentStatus field value
// and a boolean to check if the value has been set.
func (o *Order) GetPaymentStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PaymentStatus, true
}

// SetPaymentStatus sets field value
func (o *Order) SetPaymentStatus(v string) {
	o.PaymentStatus = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Order) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Order) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Order) SetCurrency(v string) {
	o.Currency = &v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *Order) GetTotalAmount() int32 {
	if o == nil || o.TotalAmount == nil {
		var ret int32
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTotalAmountOk() (*int32, bool) {
	if o == nil || o.TotalAmount == nil {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *Order) HasTotalAmount() bool {
	if o != nil && o.TotalAmount != nil {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given int32 and assigns it to the TotalAmount field.
func (o *Order) SetTotalAmount(v int32) {
	o.TotalAmount = &v
}

// GetPaymentUrl returns the PaymentUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetPaymentUrl() string {
	if o == nil || o.PaymentUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.PaymentUrl.Get()
}

// GetPaymentUrlOk returns a tuple with the PaymentUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetPaymentUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PaymentUrl.Get(), o.PaymentUrl.IsSet()
}

// HasPaymentUrl returns a boolean if a field has been set.
func (o *Order) HasPaymentUrl() bool {
	if o != nil && o.PaymentUrl.IsSet() {
		return true
	}

	return false
}

// SetPaymentUrl gets a reference to the given NullableString and assigns it to the PaymentUrl field.
func (o *Order) SetPaymentUrl(v string) {
	o.PaymentUrl.Set(&v)
}
// SetPaymentUrlNil sets the value for PaymentUrl to be an explicit nil
func (o *Order) SetPaymentUrlNil() {
	o.PaymentUrl.Set(nil)
}

// UnsetPaymentUrl ensures that no value is present for PaymentUrl, not even an explicit nil
func (o *Order) UnsetPaymentUrl() {
	o.PaymentUrl.Unset()
}

// GetStatusUrl returns the StatusUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetStatusUrl() string {
	if o == nil || o.StatusUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.StatusUrl.Get()
}

// GetStatusUrlOk returns a tuple with the StatusUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetStatusUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StatusUrl.Get(), o.StatusUrl.IsSet()
}

// HasStatusUrl returns a boolean if a field has been set.
func (o *Order) HasStatusUrl() bool {
	if o != nil && o.StatusUrl.IsSet() {
		return true
	}

	return false
}

// SetStatusUrl gets a reference to the given NullableString and assigns it to the StatusUrl field.
func (o *Order) SetStatusUrl(v string) {
	o.StatusUrl.Set(&v)
}
// SetStatusUrlNil sets the value for StatusUrl to be an explicit nil
func (o *Order) SetStatusUrlNil() {
	o.StatusUrl.Set(nil)
}

// UnsetStatusUrl ensures that no value is present for StatusUrl, not even an explicit nil
func (o *Order) UnsetStatusUrl() {
	o.StatusUrl.Unset()
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["number"] = o.Number
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["fulfillment_status"] = o.FulfillmentStatus
	}
	if true {
		toSerialize["payment_status"] = o.PaymentStatus
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.TotalAmount != nil {
		toSerialize["total_amount"] = o.TotalAmount
	}
	if o.PaymentUrl.IsSet() {
		toSerialize["payment_url"] = o.PaymentUrl.Get()
	}
	if o.StatusUrl.IsSet() {
		toSerialize["status_url"] = o.StatusUrl.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


