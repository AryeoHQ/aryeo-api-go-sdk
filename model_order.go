/*
 * Aryeo
 *
 *
 * API version: 2021-06-17
 * Contact: jarrod@aryeo.com
 */

package aryeo

import (
	"encoding/json"
)

// Order A payment request for some content or service.
type Order struct {
	// ID of the order. UUID Version 4.
	Id string `json:"id"`
	// A vanity id used for internal tracking of orders for a given vendor.
	Number int32 `json:"number"`
	// The title of the order, generated by combining the order's number property with the prefix \"Order #\".
	Title string `json:"title"`
	// The fulfillment status of the order.
	FulfillmentStatus string `json:"fulfillment_status"`
	// The payment status of the order.
	PaymentStatus string `json:"payment_status"`
	// The three-letter ISO 4217 currency code for the currency in which this order was or will be transacted. Must be a supported currency of Aryeo.
	Currency *string `json:"currency,omitempty"`
	// A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the total order amount that was or will be charged. This accounts for order items and taxes. 
	TotalAmount *int32 `json:"total_amount,omitempty"`
	// A URL of a publicly-accessible webpage to pay for the order.
	PaymentUrl NullableString `json:"payment_url,omitempty"`
	// A URL of a publicly-accessible webpage to see the order's status.
	StatusUrl NullableString `json:"status_url"`
	// Indicates if the current user is allowed to download content from the attached listing.
	DownloadsAllowed *bool `json:"downloads_allowed,omitempty"`
	// Indicates if the current user is allowed to make a payment for the order.
	PaymentsAllowed *bool `json:"payments_allowed,omitempty"`
	Address *Address `json:"address,omitempty"`
	Customer *Group `json:"customer,omitempty"`
	Listing *Listing `json:"listing,omitempty"`
	// items
	Items *[]OrderItem `json:"items,omitempty"`
	Appointments *[]Appointment `json:"appointments,omitempty"`
	UnconfirmedAppointments *[]UnconfirmedAppointment `json:"unconfirmed_appointments,omitempty"`
}

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder(id string, number int32, title string, fulfillmentStatus string, paymentStatus string, statusUrl NullableString) *Order {
	this := Order{}
	this.Id = id
	this.Number = number
	this.Title = title
	this.FulfillmentStatus = fulfillmentStatus
	this.PaymentStatus = paymentStatus
	this.StatusUrl = statusUrl
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	return &this
}

// GetId returns the Id field value
func (o *Order) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Order) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Order) SetId(v string) {
	o.Id = v
}

// GetNumber returns the Number field value
func (o *Order) GetNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *Order) GetNumberOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *Order) SetNumber(v int32) {
	o.Number = v
}

// GetTitle returns the Title field value
func (o *Order) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Order) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Order) SetTitle(v string) {
	o.Title = v
}

// GetFulfillmentStatus returns the FulfillmentStatus field value
func (o *Order) GetFulfillmentStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FulfillmentStatus
}

// GetFulfillmentStatusOk returns a tuple with the FulfillmentStatus field value
// and a boolean to check if the value has been set.
func (o *Order) GetFulfillmentStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FulfillmentStatus, true
}

// SetFulfillmentStatus sets field value
func (o *Order) SetFulfillmentStatus(v string) {
	o.FulfillmentStatus = v
}

// GetPaymentStatus returns the PaymentStatus field value
func (o *Order) GetPaymentStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentStatus
}

// GetPaymentStatusOk returns a tuple with the PaymentStatus field value
// and a boolean to check if the value has been set.
func (o *Order) GetPaymentStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PaymentStatus, true
}

// SetPaymentStatus sets field value
func (o *Order) SetPaymentStatus(v string) {
	o.PaymentStatus = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Order) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Order) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Order) SetCurrency(v string) {
	o.Currency = &v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *Order) GetTotalAmount() int32 {
	if o == nil || o.TotalAmount == nil {
		var ret int32
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTotalAmountOk() (*int32, bool) {
	if o == nil || o.TotalAmount == nil {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *Order) HasTotalAmount() bool {
	if o != nil && o.TotalAmount != nil {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given int32 and assigns it to the TotalAmount field.
func (o *Order) SetTotalAmount(v int32) {
	o.TotalAmount = &v
}

// GetPaymentUrl returns the PaymentUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetPaymentUrl() string {
	if o == nil || o.PaymentUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.PaymentUrl.Get()
}

// GetPaymentUrlOk returns a tuple with the PaymentUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetPaymentUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PaymentUrl.Get(), o.PaymentUrl.IsSet()
}

// HasPaymentUrl returns a boolean if a field has been set.
func (o *Order) HasPaymentUrl() bool {
	if o != nil && o.PaymentUrl.IsSet() {
		return true
	}

	return false
}

// SetPaymentUrl gets a reference to the given NullableString and assigns it to the PaymentUrl field.
func (o *Order) SetPaymentUrl(v string) {
	o.PaymentUrl.Set(&v)
}
// SetPaymentUrlNil sets the value for PaymentUrl to be an explicit nil
func (o *Order) SetPaymentUrlNil() {
	o.PaymentUrl.Set(nil)
}

// UnsetPaymentUrl ensures that no value is present for PaymentUrl, not even an explicit nil
func (o *Order) UnsetPaymentUrl() {
	o.PaymentUrl.Unset()
}

// GetStatusUrl returns the StatusUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Order) GetStatusUrl() string {
	if o == nil || o.StatusUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.StatusUrl.Get()
}

// GetStatusUrlOk returns a tuple with the StatusUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetStatusUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StatusUrl.Get(), o.StatusUrl.IsSet()
}

// SetStatusUrl sets field value
func (o *Order) SetStatusUrl(v string) {
	o.StatusUrl.Set(&v)
}

// GetDownloadsAllowed returns the DownloadsAllowed field value if set, zero value otherwise.
func (o *Order) GetDownloadsAllowed() bool {
	if o == nil || o.DownloadsAllowed == nil {
		var ret bool
		return ret
	}
	return *o.DownloadsAllowed
}

// GetDownloadsAllowedOk returns a tuple with the DownloadsAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetDownloadsAllowedOk() (*bool, bool) {
	if o == nil || o.DownloadsAllowed == nil {
		return nil, false
	}
	return o.DownloadsAllowed, true
}

// HasDownloadsAllowed returns a boolean if a field has been set.
func (o *Order) HasDownloadsAllowed() bool {
	if o != nil && o.DownloadsAllowed != nil {
		return true
	}

	return false
}

// SetDownloadsAllowed gets a reference to the given bool and assigns it to the DownloadsAllowed field.
func (o *Order) SetDownloadsAllowed(v bool) {
	o.DownloadsAllowed = &v
}

// GetPaymentsAllowed returns the PaymentsAllowed field value if set, zero value otherwise.
func (o *Order) GetPaymentsAllowed() bool {
	if o == nil || o.PaymentsAllowed == nil {
		var ret bool
		return ret
	}
	return *o.PaymentsAllowed
}

// GetPaymentsAllowedOk returns a tuple with the PaymentsAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPaymentsAllowedOk() (*bool, bool) {
	if o == nil || o.PaymentsAllowed == nil {
		return nil, false
	}
	return o.PaymentsAllowed, true
}

// HasPaymentsAllowed returns a boolean if a field has been set.
func (o *Order) HasPaymentsAllowed() bool {
	if o != nil && o.PaymentsAllowed != nil {
		return true
	}

	return false
}

// SetPaymentsAllowed gets a reference to the given bool and assigns it to the PaymentsAllowed field.
func (o *Order) SetPaymentsAllowed(v bool) {
	o.PaymentsAllowed = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *Order) GetAddress() Address {
	if o == nil || o.Address == nil {
		var ret Address
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetAddressOk() (*Address, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Order) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given Address and assigns it to the Address field.
func (o *Order) SetAddress(v Address) {
	o.Address = &v
}

// GetCustomer returns the Customer field value if set, zero value otherwise.
func (o *Order) GetCustomer() Group {
	if o == nil || o.Customer == nil {
		var ret Group
		return ret
	}
	return *o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCustomerOk() (*Group, bool) {
	if o == nil || o.Customer == nil {
		return nil, false
	}
	return o.Customer, true
}

// HasCustomer returns a boolean if a field has been set.
func (o *Order) HasCustomer() bool {
	if o != nil && o.Customer != nil {
		return true
	}

	return false
}

// SetCustomer gets a reference to the given Group and assigns it to the Customer field.
func (o *Order) SetCustomer(v Group) {
	o.Customer = &v
}

// GetListing returns the Listing field value if set, zero value otherwise.
func (o *Order) GetListing() Listing {
	if o == nil || o.Listing == nil {
		var ret Listing
		return ret
	}
	return *o.Listing
}

// GetListingOk returns a tuple with the Listing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetListingOk() (*Listing, bool) {
	if o == nil || o.Listing == nil {
		return nil, false
	}
	return o.Listing, true
}

// HasListing returns a boolean if a field has been set.
func (o *Order) HasListing() bool {
	if o != nil && o.Listing != nil {
		return true
	}

	return false
}

// SetListing gets a reference to the given Listing and assigns it to the Listing field.
func (o *Order) SetListing(v Listing) {
	o.Listing = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *Order) GetItems() []OrderItem {
	if o == nil || o.Items == nil {
		var ret []OrderItem
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetItemsOk() (*[]OrderItem, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Order) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []OrderItem and assigns it to the Items field.
func (o *Order) SetItems(v []OrderItem) {
	o.Items = &v
}

// GetAppointments returns the Appointments field value if set, zero value otherwise.
func (o *Order) GetAppointments() []Appointment {
	if o == nil || o.Appointments == nil {
		var ret []Appointment
		return ret
	}
	return *o.Appointments
}

// GetAppointmentsOk returns a tuple with the Appointments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetAppointmentsOk() (*[]Appointment, bool) {
	if o == nil || o.Appointments == nil {
		return nil, false
	}
	return o.Appointments, true
}

// HasAppointments returns a boolean if a field has been set.
func (o *Order) HasAppointments() bool {
	if o != nil && o.Appointments != nil {
		return true
	}

	return false
}

// SetAppointments gets a reference to the given []Appointment and assigns it to the Appointments field.
func (o *Order) SetAppointments(v []Appointment) {
	o.Appointments = &v
}

// GetUnconfirmedAppointments returns the UnconfirmedAppointments field value if set, zero value otherwise.
func (o *Order) GetUnconfirmedAppointments() []UnconfirmedAppointment {
	if o == nil || o.UnconfirmedAppointments == nil {
		var ret []UnconfirmedAppointment
		return ret
	}
	return *o.UnconfirmedAppointments
}

// GetUnconfirmedAppointmentsOk returns a tuple with the UnconfirmedAppointments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetUnconfirmedAppointmentsOk() (*[]UnconfirmedAppointment, bool) {
	if o == nil || o.UnconfirmedAppointments == nil {
		return nil, false
	}
	return o.UnconfirmedAppointments, true
}

// HasUnconfirmedAppointments returns a boolean if a field has been set.
func (o *Order) HasUnconfirmedAppointments() bool {
	if o != nil && o.UnconfirmedAppointments != nil {
		return true
	}

	return false
}

// SetUnconfirmedAppointments gets a reference to the given []UnconfirmedAppointment and assigns it to the UnconfirmedAppointments field.
func (o *Order) SetUnconfirmedAppointments(v []UnconfirmedAppointment) {
	o.UnconfirmedAppointments = &v
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["number"] = o.Number
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["fulfillment_status"] = o.FulfillmentStatus
	}
	if true {
		toSerialize["payment_status"] = o.PaymentStatus
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.TotalAmount != nil {
		toSerialize["total_amount"] = o.TotalAmount
	}
	if o.PaymentUrl.IsSet() {
		toSerialize["payment_url"] = o.PaymentUrl.Get()
	}
	if true {
		toSerialize["status_url"] = o.StatusUrl.Get()
	}
	if o.DownloadsAllowed != nil {
		toSerialize["downloads_allowed"] = o.DownloadsAllowed
	}
	if o.PaymentsAllowed != nil {
		toSerialize["payments_allowed"] = o.PaymentsAllowed
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.Customer != nil {
		toSerialize["customer"] = o.Customer
	}
	if o.Listing != nil {
		toSerialize["listing"] = o.Listing
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.Appointments != nil {
		toSerialize["appointments"] = o.Appointments
	}
	if o.UnconfirmedAppointments != nil {
		toSerialize["unconfirmed_appointments"] = o.UnconfirmedAppointments
	}
	return json.Marshal(toSerialize)
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


